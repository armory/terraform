locals {
  eks_cluster_name_local = "%{ if var.add_suffix }${local.eks_cluster_name}-${data.terraform_remote_state.random_string.outputs.suffix}%{ else }${local.eks_cluster_name}%{ endif }"
  eks_cluster_iam_role_local = "%{ if var.add_suffix }${local.eks_cluster_iam_role}-${data.terraform_remote_state.random_string.outputs.suffix}%{ else }${local.eks_cluster_iam_role}%{ endif }"
  eks_cluster_sg_local = "%{ if var.add_suffix }${local.eks_cluster_sg_name}-${data.terraform_remote_state.random_string.outputs.suffix}%{ else }${local.eks_cluster_sg_name}%{ endif }"
  eks_worker_iam_role_local = "%{ if var.add_suffix }${local.eks_worker_iam_role}-${data.terraform_remote_state.random_string.outputs.suffix}%{ else }${local.eks_worker_iam_role}%{ endif }"
  eks_worker_sg_local = "%{ if var.add_suffix }${local.eks_worker_sg_name}-${data.terraform_remote_state.random_string.outputs.suffix}%{ else }${local.eks_worker_sg_name}%{ endif }"
}

data "aws_vpc" "selected" {
  filter {
    name   = "tag:Name"
    values = ["${data.terraform_remote_state.vpc.outputs.vpc_name}"]
  }
}

data "aws_subnet_ids" "private" {
  vpc_id = data.aws_vpc.selected.id
  
  tags = {
    Name = data.terraform_remote_state.vpc.outputs.private_subnet_name
  }
}

data "aws_ami" "worker" {
  most_recent = true
  owners = ["amazon"]

  filter {
    name = "name"
    values = ["amazon-eks-node-${local.eks_cluster_version}-v*"]
  }
}

output "subnet_ids" {
  value = data.aws_subnet_ids.private.ids
}

output "ami_id" {
  value = data.aws_ami.worker.id
}

output "ami_name" {
  value = data.aws_ami.worker.name
}

module "spinnaker_cluster_sg" {
  source = "terraform-aws-modules/security-group/aws"
  version = "~> 3.0"

  create = var.create_spinnaker_cluster_sg
  use_name_prefix = false

  name        = local.eks_cluster_sg_local
  description = "Allow inbound HTTPS/TLS from all for EKS cluster"
  vpc_id      = data.aws_vpc.selected.id

  ingress_cidr_blocks = concat(split(",", var.armory_cidrs), [var.vpc_cidr])
  ingress_rules       = ["https-443-tcp"]

  tags = {
    owner = var.owner
    env   = var.env
  }
}

data "aws_security_group" "spinnaker_cluster_sg" {
  depends_on = [ module.spinnaker_cluster_sg ]

  vpc_id = data.aws_vpc.selected.id
  name   = local.eks_cluster_sg_local
}

module "spinnaker_worker_sg" {
  source = "terraform-aws-modules/security-group/aws"
  version = "~> 3.0"

  create = var.create_spinnaker_worker_sg
  use_name_prefix = false

  name        = local.eks_worker_sg_local
  description = "Allow inbound for EKS workers"
  vpc_id      = data.aws_vpc.selected.id

  ingress_with_self   = [
    {
      rule        = "all-all"
      description = "Allow node to communicate with each other"
    },
  ]

  computed_ingress_with_source_security_group_id = [
    {
      rule                     = "all-all"
      source_security_group_id = "${data.aws_security_group.spinnaker_cluster_sg.id}"
      description              = "Allow worker Kubelets and pods to receive communication from the cluster control plane"
    }
  ]
  number_of_computed_ingress_with_source_security_group_id = 1

  tags = {
    owner = var.owner
    env   = var.env
  }
}


data "aws_security_group" "spinnaker_worker_sg" {
  depends_on = [ module.spinnaker_worker_sg ]

  vpc_id = data.aws_vpc.selected.id
  name   = local.eks_worker_sg_local
}

module "spinnaker_cluster_role" {
  source = "terraform-aws-modules/iam/aws//modules/iam-assumable-role"
  version = "~> 2.0"

  create_role = var.create_spinnaker_cluster_role

  role_name         = local.eks_cluster_iam_role_local
  role_requires_mfa = false

  trusted_role_services = [
    "eks.amazonaws.com"
  ]

  custom_role_policy_arns = [
    "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy",
    "arn:aws:iam::aws:policy/AmazonEKSServicePolicy",
  ]
}

data "aws_iam_role" "spinnaker_cluster_role" {
  depends_on = [ module.spinnaker_cluster_role ]

  name = local.eks_cluster_iam_role_local
}


output "spinnaker_cluster_role_id" {
  value = data.aws_iam_role.spinnaker_cluster_role.id
}

output "spinnaker_cluster_role_arn" {
  value = data.aws_iam_role.spinnaker_cluster_role.arn
}

output "spinnaker_cluster_sg_id" {
  value = data.aws_security_group.spinnaker_cluster_sg.id
}

output "spinnaker_cluster_sg_name" {
  value = data.aws_security_group.spinnaker_cluster_sg.name
}

output "spinnaker_worker_sg_id" {
  value = data.aws_security_group.spinnaker_worker_sg.id
}

output "spinnaker_worker_sg_name" {
  value = data.aws_security_group.spinnaker_worker_sg.name
}

